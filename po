#!/usr/bin/env node
const yargsParser = require('yargs')

const myargv = ['test', 'me', '-d', '--no-stuff','--two','four','--woot', 5]
const chainCommands = (baseYargs, commands) =>
  commands.reduce((yargs, command) => yargs.command)

const argv = process.argv.slice(2)

const yargs = yargsParser(argv)
    .usage('$0 [global-args] <generator> <action> <name> [args]')
    .scriptName('hygen')
    .env('HYGEN')
    .version(false)

const help = yargs => (
  yargs
    .usage('$0 [globalArgs] <generator> <action> <name> [args]')
    .showHidden('extra-help','all the help')
    .help()
)

const verbosity = yargs => (
  yargs.group('log','Log Verbosity')
    .option('silent', {
    alias: 's',
    describe: 'no output except exit code',
    type: 'boolean',
    conflicts: ['quiet', 'error', 'warn', 'info', 'debug', 'trace'],
    group: 'Visibility',
    hidden: true,
    global: true,
  })
    .option('quiet', {
      alias: ['q'],
      describe: 'no output except errors',
      type: 'boolean',
      conflicts: ['silent', 'warn', 'info', 'debug', 'trace'],
      group: 'Visibility',
      hidden: true,

      global: true,
    })
    .option('warn', {
      alias: ['w'],
      describe: 'no output except errors and warnings',
      type: 'boolean',
      conflicts: ['silent', 'error', 'info', 'debug', 'trace'],
      group: 'Visibility',
      global: true,
    })
    .option('verbose', {
      alias: ['v'],
      describe: 'standard plus output',
      type: 'boolean',
      conflicts: ['silent', 'error', 'warn', 'debug', 'trace'],
      group: 'Visibility',
      global: true,
    })
    .option('debug', {
      alias: '-vv',
      describe: 'all of the output and short traces',
      type: 'boolean',
      conflicts: ['silent', 'error', 'warn', 'info', 'trace'],
      group: 'Visibility',
      global: true,
    })
    .option('trace', {
      alias: 'vvv',
      describe: 'all of the output and traces',
      type: 'boolean',
      conflicts: ['silent', 'error', 'warn', 'info', 'debug'],
      group: 'Visibility',
      hidden: true,

      global: true,
    })
)

const verbose = verbosity(yargs).showHelp()



//
// const base = parser(['--nope','q','h'])
//
// const args = chainCommands(y, [help, verbosity])
//
// console.log("args",base.argv, args.argv);

